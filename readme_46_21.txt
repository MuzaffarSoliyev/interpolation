Документация
============

Задача: Интерполяция параболическими сплайнами (условие дополнительного узла в приграничных условиях).
--------------------------------------------------------------------------

Выполнил: Солиев Музаффар / Группа: М1-15
-------------------------------------------

==================
запуск программы:

> <название исполняемого файла>(.exe) <входной файл> <выходной файл> <аргументы>

Где аргументы:
  -d    	вывод в консоль сообщений отладки и хода решений [по-умолчанию откл]
  -e    	вывод ошибок [по-умолчанию откл]
  -p    	вывод матрицы в самом начале [по-умолчанию откл]
  -t    	вывод времени выполнения программы [по-умолчанию откл]
  -h, -?	справка
  
По умолчанию входной/выходной файл:
46_21_in.txt
46_21_out.txt
==================
error - флаг ошибок
debug - флаг отладки

Коды ошибки
	 0 - ошибок нет.
	-1 - входной файл не открыт.
	-2 - файл пуст либо количество уравений меньше нуля.
	-3 - не удалось выделить память.
	-4 - не удалось считать элемент матрицы.
	-5 - выходной файл не открыт.
	-6 - задана неверный аргумент.


______________________________________
size_t stringLength(const char *str)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Аргументы:
const char *str - указатель на строку
- функция возвращает количество символов в строке str.
Перебирает все символы, пока не встретится символ('\0') и увеличивает
счётчик. Когда встречается первый нулевой символ возвращает значение счётчика.

_______________________________________________________
int stringComp(const char *str1, const char *str2)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Аргументы:
const char *str1 - указатель на первую строку
const char *str2 - указатель на вторую строку
- функция посимвольно сравнивает две строки (str1 и str2) и выдает:
	-1 - когда длины двух строк разные или эти строри разные
	 0 - когда две строки совпадают
	 
______________________________________________________________________________________________________________________________________________
void Coeff_46_21(int n, double *x, double *f_x, double *ksi, double *c1, double *c2, double *c3,double x0,double f_x0,double xn1,double f_xn1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Аргументы:
n - количество заданных точек
x - заданные точки
f_x - значения функции в заданных точках
ksi - дополнительные точки, по которым строится множество интерполирующих функций
c1 - первый коэффициент интерполяции
c2 - второй коэффициент интерполяции
c3 - третий коэффициент интерполяции
x0 - первая дополнительная точка
f_x0 - значения функции в первой дополнительной точке
xn1 - вторая дополнительная точка 
f_xn1 - значения функции во второй дополнительной точке
- Данная процедура строит трёхдиагоняльную мактрицу 
Алгоритм:
Сначала строим n-1 уравненийc n+1 неизвестными по формуле: (8) Богачёв К.Ю"Практикум на ЭВМ. Методы приближения функций". стр 83
С помощью дополнительных условий в приграничных точках получаем две недостающиеся уравнения.
Получили трёхдиагоняльную матрицу.

______________________________________________________________________________
void SolveSystem(int n, double *a, double *c, double *d, double *b, double *x)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Аргументы:
n - число уравнений в системе
a - элементы главной диагонали трёхдиагональной матрицы
c - элементы находящиеся над главной диагональю 
d - элементы находящиеся под главной диагональю 
b - вектор свободных членов
x - вектор неизвесных
Алгоритм:
 - Данная процедура методом прогонки решает систему линейных уравнений. Ответ будет записан в массив x.

__________________________________________________________________________________
double Value_46_21(double t, int n, double *c1,double *c2,double *c3, double *ksi)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Аргументы:
t - точка в которой нужно вычислить значение функции
n - количство заданых точек
c1 - первый коэффициент интерполяции
c2 - второй коэффициент интерполяции
c3 - третий коэффициент интерполяции
ksi - дополнительные точки, по которым строится множество интерполирующих функций
Алгоритм:
Сначала находим в каком отрезке нахожится t(по ksi) и вычисляем значение функции.
